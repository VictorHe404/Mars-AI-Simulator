from abc import ABC, abstractmethod
class Event(ABC):
    """
    This is the super class for events generated by user.
    """
    @abstractmethod
    def execute(self):
        """execute the Event"""
        pass


class Quit(Event):
    """
    Quit Event
    """
    def __init__(self, msg: str) -> None:
        self.msg = msg

    def execute(self):
        """Quit the application and return the error message"""
        raise NotImplementedError


class CommandEvent(ABC):
    """
    Super class of Command Event
    """
    def __init__(self, command: str) -> None:
        self.command = command

    def parse_command(self) -> list(str):
        """
        parse the given command into executable pieces
        """
        raise NotImplementedError

    @abstractmethod
    def execute(self):
        pass


class _EventQueue:
    """
    the Event Queue helps EventManager manages the event
    """
    def __init__(self) -> None:
        """Initialize an empty queue."""
        self.queue = []

    def push(self, item) -> None:
        """Add an item to the end of the queue."""
        self.queue.append(item)

    def pop(self) -> Event:
        """
        Remove and return the front item of the queue.
        Raises an error if the queue is empty.
        """
        if self.is_empty():
            raise IndexError("Pop from an empty queue")
        return self.queue.pop(0)

    def is_empty(self):
        """Check if the queue is empty."""
        return len(self.queue) == 0

    def size(self):
        """Return the number of elements in the queue."""
        return len(self.queue)

    def __str__(self):
        """Return a string representation of the queue."""
        return "Queue: " + " -> ".join(map(str, self.queue))

class EventManager:
    """
    An event manager that receives, store and arrange the execution of the events
    """
    def __init__(self):
        """
        idea: use a queue of event to mamage the execution of the event
        when an event id received, it is stored in the eventQueue
        the Event manager will execute the event based on the
        first-come-first-serve basis
        """
        self.event_queue = _EventQueue
