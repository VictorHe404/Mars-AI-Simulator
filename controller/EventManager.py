from abc import ABC
from weakref import WeakSet

class Event(ABC):
    """
    This is the super class for events generated by user.
    """


class Quit(Event):
    """
    Quit Event
    """
    def __init__(self, msg: str) -> None:
        self.msg = msg

class InitialEvent(Event):
    """
    Initial Event
    """
    def __init__(self, msg: str) -> None:
        self.msg = msg

class TicketEvent(Event):
    """
    Ticket Event
    """
    def __init__(self, msg: str) -> None:
        self.msg = msg

class CommandEvent(ABC):
    """
    Super class of Command Event
    """
    def __init__(self, command: str) -> None:
        self.command = command

    def parse_command(self) -> list[str]:
        """
        parse the given command into executable pieces
        """
        raise NotImplementedError

class ActionStatusEvent(Event):
    """
    Status Event with a boolean status and message
    """
    def __init__(self, status: bool, msg: str, action_name: str) -> None:
        super().__init__(status, msg, action_name)



class EventManager:
    """
    An event manager that receives, store and arrange the execution of the events
    """
    def __init__(self):
        """
        idea: use a queue of event to manage the execution of the event
        when an event id received, it is stored in the eventQueue
        the Event manager will execute the event based on the
        first-come-first-serve basis
        """
        self.subscribers = WeakSet()

    def register(self, subscriber) -> None:
        """
        Register the subscriber to the event manager
        """
        self.subscribers.add(subscriber)

    def unregister(self, subscriber) -> None:
        """
        Unregister the subscriber from the event manager
        """
        self.subscribers.remove(subscriber)

    def post_event(self, event) -> None:
        """
        Post the event to the event manager
        """
        for subscriber in self.subscribers:
            subscriber.notify(event)



